version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "${API_PORT:-8000}:8000"
      - "${GRPC_PORT:-50051}:50051"
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - qdrant
      - elasticlite
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - neurospark-network

  # Curator Agent
  curator:
    build:
      context: .
      dockerfile: docker/Dockerfile.curator
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
      - minio
    networks:
      - neurospark-network

  # Vectoriser Agent
  vectoriser:
    build:
      context: .
      dockerfile: docker/Dockerfile.vectoriser
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
      - qdrant
      - minio
    networks:
      - neurospark-network

  # Professor Agent
  professor:
    build:
      context: .
      dockerfile: docker/Dockerfile.professor
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
      - qdrant
    networks:
      - neurospark-network

  # Reviewer Agent
  reviewer:
    build:
      context: .
      dockerfile: docker/Dockerfile.reviewer
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
      - qdrant
    networks:
      - neurospark-network

  # Tutor Agent
  tutor:
    build:
      context: .
      dockerfile: docker/Dockerfile.tutor
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
      - postgres
    networks:
      - neurospark-network

  # Auditor Agent
  auditor:
    build:
      context: .
      dockerfile: docker/Dockerfile.auditor
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
      - postgres
    networks:
      - neurospark-network

  # Custodian Agent
  custodian:
    build:
      context: .
      dockerfile: docker/Dockerfile.custodian
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
      - qdrant
    networks:
      - neurospark-network

  # Governor Agent
  governor:
    build:
      context: .
      dockerfile: docker/Dockerfile.governor
    volumes:
      - ./src:/app/src
    env_file:
      - .env
    depends_on:
      - api
      - redis
    networks:
      - neurospark-network

  # Postgres Database
  postgres:
    image: postgres:16-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres_password}
      - POSTGRES_DB=${POSTGRES_DB:-neurospark}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neurospark-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neurospark-network

  # ElasticLite (Elasticsearch-compatible)
  elasticlite:
    image: elasticsearch:8.9.0
    ports:
      - "${ELASTIC_PORT:-9200}:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - neurospark-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - neurospark-network

  # Redis Message Bus
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neurospark-network

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - neurospark-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - neurospark-network

volumes:
  postgres_data:
  qdrant_data:
  elastic_data:
  minio_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  neurospark-network:
    driver: bridge
