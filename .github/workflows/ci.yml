name: NeuroSpark CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Lint with flake8
        run: |
          flake8 src tests

      - name: Check formatting with black
        run: |
          black --check src tests

      - name: Check imports with isort
        run: |
          isort --check-only --profile black src tests

      - name: Type check with mypy
        run: |
          mypy src tests

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "OPENALEX_API_KEY=${{ secrets.OPENALEX_API_KEY }}" >> .env
          echo "NEWSAPI_API_KEY=${{ secrets.NEWSAPI_API_KEY }}" >> .env
          echo "SERPAPI_API_KEY=${{ secrets.SERPAPI_API_KEY }}" >> .env

      - name: Run unit tests
        run: |
          pytest -v tests/ -m "unit or not marked" --cov=src --cov-report=term

      - name: Run integration tests
        run: |
          pytest -v tests/ -m "integration" --cov=src --cov-report=term --cov-append

      - name: Run end-to-end tests
        run: |
          pytest -v tests/ -m "e2e" --cov=src --cov-report=term --cov-append

      - name: Generate coverage report
        run: |
          pytest --cov=src --cov-report=xml tests/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [base, api, curator, vectoriser, professor, reviewer, tutor, auditor, custodian, governor]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Build ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.service }}
          push: false
          tags: neurospark-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Temp fix for https://github.com/docker/build-push-action/issues/252
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  docker-compose:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cp .env.example .env

      - name: Validate docker-compose.yml
        run: |
          docker-compose config

      - name: Start essential services
        run: |
          docker-compose up -d postgres redis qdrant elasticlite minio

      - name: Wait for services to be ready
        run: |
          sleep 30

      - name: Check service health
        run: |
          docker-compose ps

      - name: Stop services
        run: |
          docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r src -f json -o bandit-results.json

      - name: Check dependencies for vulnerabilities
        run: |
          safety check

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
